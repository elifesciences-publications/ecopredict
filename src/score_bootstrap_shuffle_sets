#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Bootstrap the score by permutating strains"
    parser = argparse.ArgumentParser(description=description,
                                     prog='score_bootstrap_strains')

    parser.add_argument('predictions', action='store',
                        help='Predictions file')
    parser.add_argument('matrix', action='store',
                        help='EMAP matrix')
    parser.add_argument('fdr', action='store',
                        help='FDR matrix')

    parser.add_argument('--bootstraps', action='store',
                        type=int,
                        default=1000,
                        help='Bootstraps [Default: 1000]')
    parser.add_argument('--fdr-threshold', action='store',
                        type=float,
                        default=0.05,
                        help='FDR threshold [Default: 0.05]')

    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def get_phenotypes(data, a, z):
    if data.name not in a.columns:
        return np.nan, np.nan
    strains = set(data.dropna().index).intersection(a[data.name].dropna().index)
    return z.loc[strains, data.name].dropna().shape[0], a.loc[strains, data.name].dropna().shape[0]

def evaluate(data, a, z, pred=None):
    if data.name not in a.columns:
        return np.nan
    strains = set(data.dropna().index).intersection(a[data.name].dropna().index)
    if pred is not None and data.name not in pred.columns:
        return np.nan
    strains = set(data.dropna().index).intersection(a[data.name].dropna().index)
    y_true = z[data.name].loc[strains]
    y_true[np.invert(np.isnan(y_true))] = 1
    y_true[np.isnan(y_true)] = 0
    if y_true.shape[0] == 0:
        return np.nan
    minmax = preprocessing.MinMaxScaler()
    if pred is None:
        y_pred = minmax.fit_transform(data.loc[strains].copy(deep=True).reshape(-1, 1)).reshape(-1, 1)
    else:
        minmax.fit(pred.loc[strains,
                            data.name].reshape(-1, 1))
        y_pred = minmax.transform(data.loc[strains].copy(deep=True).reshape(-1, 1)).reshape(-1, 1)
    fpr, tpr, rt = roc_curve(y_true, y_pred)
    prec, rec, pt = precision_recall_curve(y_true, y_pred)
    tv = y_true.copy(deep=True)
    tv[tv == 0] = -1
    tv[tv == 1] = 1
    x_mcc = []
    y_mcc = []
    f1s = []
    for t in np.arange(0, 1, 0.005):
        s1 = np.array(y_pred)
        s1[s1 >= t] = 1
        s1[s1 < t] = -1
        x_mcc.append(t)
        y_mcc.append(matthews_corrcoef(tv, s1))
        s2 = np.array(y_pred)
        s2[s2 >= t] = 1
        s2[s2 < t] = 0
        f1s.append(f1_score(y_true, s2))
    return (auc(fpr, tpr), fpr, tpr, rt), (auc(rec, prec), rec, prec, pt), (f1s, x_mcc, y_mcc)

if __name__ == "__main__":
    import sys
    import random
    import numpy as np
    import pandas as pd
    from sklearn.metrics import roc_curve, auc, precision_recall_curve
    from sklearn.metrics import f1_score, matthews_corrcoef
    from sklearn import preprocessing

    options = get_options()

    # Read strains data
    a = pd.read_table(options.matrix)
    a.set_index(a.columns[0], inplace=True)
    # Load the FDR corrections to identify proper phenotypes
    f = pd.read_table(options.fdr)
    f.set_index(f.columns[0], inplace=True)

    # Apply the FDR correction
    v = a[f < options.fdr_threshold]
    v = v[v < 0]

    m = pd.read_table(options.predictions)
    m.set_index(m.columns[0], inplace=True)
    m.index.name = 'condition'
    m = m.T
    
    phenotypes = m.apply(get_phenotypes, a=a, z=v).dropna()

    for i in range(options.bootstraps):
        conditions = list([m[c] for c in m.columns])
        random.shuffle(conditions)

        s = m.copy(deep=True)

        for c1, c2 in zip(conditions, m.columns):
            s[c2] = c1

        res = s.apply(evaluate, a=a, z=v).dropna()

        conditions = set(phenotypes.index).intersection(res.index)
        for c in conditions:
            (roc_auc, fpr, tpr, rt), (prec_auc, rec, prec, pt), (f1s, x_mcc, y_mcc) = res[c]
            nsick, nall = phenotypes[c]
            
            for x, y, z in zip(fpr, tpr, rt):
                print('%d\t%s\t%d\t%d\t%.5f\t%.5f\t%.5f\t%.5f\troc' % (i, c, nsick, nall, roc_auc, z, x, y))
            for x, y, z in zip(x_mcc, y_mcc, f1s):
                print('%d\t%s\t%d\t%d\t%.5f\t%.5f\t%.5f\t%.5f\tmcc' % (i, c, nsick, nall, z, x, x, y))
            for x, y, z in zip(rec, prec, pt):
                print('%d\t%s\t%d\t%d\t%.5f\t%.5f\t%.5f\t%.5f\tprec' % (i, c, nsick, nall, prec_auc, z, x, y))
