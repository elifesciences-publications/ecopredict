#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run example plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_examples')

    parser.add_argument('strains')
    parser.add_argument('eck')
    parser.add_argument('locus')
    parser.add_argument('gbk')
    parser.add_argument('deletion')
    parser.add_argument('uncommon')
    parser.add_argument('sickness')
    parser.add_argument('predictions')
    parser.add_argument('matrix')
    parser.add_argument('fdr')
    parser.add_argument('deletionfdr')
    parser.add_argument('conditions')
    parser.add_argument('condition')
    parser.add_argument('cname')
    parser.add_argument('outfile')

    parser.add_argument('--height', action='store',
                        type=float,
                        default=1,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width denominator [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    parser.add_argument('--max-strains', action='store',
                        type=int,
                        default=18,
                        help='Maximum number of strains [Default: 18]')
    parser.add_argument('--max-genes', action='store',
                        type=int,
                        default=20,
                        help='Maximum number of genes [Default: 20]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap


def expected(values, pseudo):
    return sum(np.log(1 - values + pseudo))/values.shape[0]
                

def plot_details(c, c1, cname, width, height, outfile, dpi, max_strains=18, max_genes=20):
    weights = -(np.log10(f[c1].loc[genes[c]].dropna()).replace([np.inf, -np.inf], np.nan).dropna() * g.loc[genes[c]]) / gmax
    
    weights = weights.sort_values(ascending=False).head(max_genes)
    
    astrains = score[c].loc[
                        z[c].dropna().index
                        ].sort_values(ascending=False).dropna().index
    pstrains = astrains[:max_strains]
    
    if max_strains > 30:
        plt.figure(figsize=(weights.shape[0]*1.75/width, height))
    else:
        plt.figure(figsize=(weights.shape[0]*1.75/width, height))

    ws = max(6, weights.shape[0])
    
    gs = gridspec.GridSpec(len(astrains),
                           ws*2 + 9,
                           wspace=0.01,
                           hspace=0.01)

    plt.subplot(gs[:, :ws])
    im = plt.imshow(p.loc[astrains,
                          weights.sort_values(ascending=False).index],
                     cmap=cmap,
                     vmin=0, vmax=1,
                     aspect='auto',
                     interpolation='none',
                    )
    im.set_rasterized(True)
    plt.yticks([])
    for i  in range(weights.shape[0]):
        plt.axvline(i+0.5,
                    color='k')
    plt.xticks(range(weights.shape[0]),
               [en.get(x, x) for x in weights.sort_values(ascending=False).index],
               rotation=90)
    plt.ylabel('Strains')
    if weights.shape[0] > 7:
        plt.xlabel('Disruption score')
    else:
        plt.xlabel('Disruption\nscore')

    plt.subplot(gs[:, ws + 1:ws + 2])
    im = plt.imshow([[x]
                     for x in score[c].loc[astrains]],
                     cmap=plt.get_cmap('Reds'),
                     vmin=0,
                     aspect='auto',
                     interpolation='none',
                    )
    im.set_rasterized(True)
    plt.yticks([])
    plt.xticks([0],
               ['Prediction'],
               rotation=90)

    plt.subplot(gs[:, ws + 2:ws + 3])
    im = plt.imshow([[x]
                     for x in z[c].loc[astrains]],
                     cmap=plt.get_cmap('Reds'),
                     vmin=0,
                     vmax=1,
                     aspect='auto',
                     interpolation='none',
                    )
    im.set_rasterized(True)
    plt.yticks([])
    plt.xticks([0],
               ['Phenotype'],
               rotation=90)

    plt.subplot(gs[:int(len(astrains) * 0.66),
                   ws + 6:ws*2 + 6])
    im = plt.imshow(p.loc[pstrains,
                     weights.sort_values(ascending=False).index],
                     cmap=cmap,
                     vmin=0, vmax=1,
                     aspect='auto',
                     interpolation='none',
                    )
    im.set_rasterized(True)
    plt.yticks([])
    for i  in range(weights.shape[0]):
        plt.axvline(i+0.5,
                    color='k')
    for i  in range(len(pstrains)):
        plt.axhline(i+0.5,
                    color='k')
    plt.xticks(range(weights.shape[0]),
               [en.get(x, x) for x in weights.sort_values(ascending=False).index],
               rotation=90)

    ax = plt.subplot(gs[-int(len(astrains) * 0.17):,
                   ws + 6:ws*2 + 6])
    plt.bar(range(weights.shape[0]),
            weights.sort_values(ascending=False),
            width=1,
            color=sns.xkcd_rgb['light grey'])
    plt.xticks([x + 0.5 for x in range(weights.shape[0])],
               [en.get(x, x) for x in weights.sort_values(ascending=False).index],
               rotation=90)
    plt.xlim(0, weights.shape[0])
    for i  in range(weights.shape[0]):
        plt.axvline(i,
                    color='grey')
    plt.yticks([])
    if weights.shape[0] > 7:
        plt.xlabel('Predictive model weights')
    else:
        plt.xlabel('Predictive\nmodel weights')

    plt.subplot(gs[:int(len(astrains) * 0.66),
                   ws*2 + 7:ws*2 + 8])
    im = plt.imshow([[x]
                for x in score[c].loc[pstrains]],
               aspect='auto',
               interpolation='nearest',
               cmap=plt.get_cmap('Reds'),
               vmin=0)
    im.set_rasterized(True)
    plt.xticks([0],
               ['Prediction'],
               rotation=90)
    plt.yticks([])
    for i  in range(len(pstrains)):
        plt.axhline(i+0.5,
                    color='k')

    ax = plt.subplot(gs[:int(len(astrains) * 0.66),
                        ws*2 + 8:])
    im = plt.imshow([[x]
                for x in z[c].loc[pstrains]],
               aspect='auto',
               interpolation='nearest',
               cmap=plt.get_cmap('Reds'),
               vmin=0,
               vmax=1)
    im.set_rasterized(True)
    plt.xticks([0],
               ['Phenotype'],
               rotation=90)
    plt.yticks(range(len(pstrains)),
               [sdict.get(x, x) for x in pstrains])
    ax.yaxis.tick_right()
    for i  in range(len(pstrains)):
        plt.axhline(i+0.5,
                    color='k')
                    
    plt.suptitle('Condition: %s' % cname, fontsize=11)
                    
    plt.savefig(outfile,
                dpi=dpi)


if __name__ == "__main__":
    import os
    import numpy as np
    import pandas as pd
    from Bio import Phylo
    from Bio import SeqIO
    from sklearn.metrics import roc_curve, auc, f1_score

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches
    import matplotlib.colors as colors
    from matplotlib import gridspec

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    sdict = pd.read_table(options.strains).set_index('Strain Identifier')['Strain name'].to_dict()

    conversion = {x.split('\t')[0]:x.rstrip().split()[1]
                  for x in open(options.eck)}
    lconversion = {x.split()[0]:x.rstrip().split()[1]
                   for x in open(options.locus)}
    uncommon = {lconversion.get(x.rstrip(), x.rstrip())
                for x in open(options.uncommon)}
    # Which functions are those?
    ep = {}
    en = {}
    for s in SeqIO.parse(options.gbk, 'genbank'):
        for f in s.features:
            if 'gene_synonym' not in f.qualifiers or f.type != 'CDS':
                continue
            loc = filter(lambda x: x.strip().startswith('ECK'),
                         f.qualifiers['gene_synonym'][0].split(';'))[0].strip()
            loc = conversion.get(loc, loc)
            en[loc] = f.qualifiers.get('gene', [''])[0]
            ep[loc] = f.qualifiers.get('product', [''])[0]

    genes = {x.split('\t')[0]: {conversion.get(y.split('-')[0],
                                               y.split('-')[0])
                                for y in x.rstrip().split('\t')[1].split()
                                if conversion.get(y.split('-')[0], y.split('-')[0])
                                not in uncommon}
             for x in open(options.deletion)
             if len(x.split()) > 1}

    p = pd.read_table(options.sickness)
    p.set_index(p.columns[0], inplace=True)
    p[np.isnan(p)] = 0
    p1 = p / -p.apply(expected, pseudo=0.0)
    p.T.loc['NT12001'] = [0 for x in range(p.shape[0])]
    p1.T.loc['NT12001'] = [0 for x in range(p.shape[0])]
    p = p.T
    p1 = p1.T

    score = pd.read_table(options.predictions)
    score.set_index(score.columns[0], inplace=True)
    score[np.isnan(score)] = 0.
    score = score.T

    a = pd.read_table(options.matrix)
    a.set_index(a.columns[0], inplace=True)
    f = pd.read_table(options.fdr)
    f.set_index(f.columns[0], inplace=True)
    v = a[f < 0.05]
    v = v[v < 0]

    z = f.copy(deep=True)
    z[(a < 0) & (f < 0.05)] = 1
    z[(a >= 0) & (f < 0.05)] = 0
    z[f >= 0.05] = 0
    z = z.loc[score.index]
    
    f = pd.read_table(options.deletionfdr)
    f.set_index(f.columns[0], inplace=True)
    g = pd.read_table(options.deletionfdr)
    g.set_index(g.columns[0], inplace=True)
    g[g > 0.05] = 9999
    g[g <= 0.05] = 1
    g[g == 9999] = 0

    f.index = [conversion.get(x.split('-')[0],
                              x.split('-')[0])
               for x in f.index]
    g.index = [conversion.get(x.split('-')[0],
                              x.split('-')[0])
               for x in g.index]

    g = g.T.sum() / g.shape[1]

    gmax = pd.Series(
            -np.log10(f.values.flatten())
            ).replace([np.inf,
                       -np.inf],
                       np.nan).dropna().max() * g.max()

    conditions = {x.rstrip().split()[0]: x.rstrip().split()[1]
                  for x in open(options.conditions)}
              
    c1 = conditions.get(options.condition, options.condition)    
    weights = -(np.log10(
        f[c1].loc[genes[options.condition]].dropna()
        ).replace([np.inf, -np.inf], np.nan).dropna() * g.loc[genes[options.condition]]) / gmax
    weights = weights.sort_values(ascending=False)

    # convert some chars to their greek counterpart
    cname = options.cname.replace('uM', '$\mu$M').replace('ug', '$\mu$g')

    cmap = cmap = truncate_colormap(plt.cm.plasma, 0, 0.8)
    cmap.set_bad('grey', 0.2)
    cmap.set_under('red', 1)

    plot_details(options.condition, c1, cname,
                 options.width,
                 options.height,
                 options.outfile,
                 options.dpi,
                 max_strains=options.max_strains,
                 max_genes=options.max_genes)
