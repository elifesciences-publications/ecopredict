#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_categories_roc')

    parser.add_argument('auc')
    parser.add_argument('details')
    parser.add_argument('outfile')

    parser.add_argument('--height', action='store',
                        type=float,
                        default=1,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


if __name__ == "__main__":
    import pandas as pd

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.width, options.height))

    conditions = {}
    rconditions = {}
    categories = pd.read_table(
        options.details
        ).set_index('Label')['Type of stress'].to_dict()
    for cat in set(categories.values()):
        conditions[cat] = set()
        for k, v in categories.items():
            if v == cat:
                conditions[cat].add(k)
                rconditions[k] = cat

    chem1 = pd.read_table(
        options.details
        ).set_index('Label')['Chemical 1'].to_dict()
    chem2 = pd.read_table(
        options.details 
        ).set_index('Label')['Chemical 2'].to_dict()

    res = []
    auc = pd.read_table(options.auc,
                        header=None)
    auc.columns = ['condition', 'auc', 'tpr', 'fpr', 'phenotypes']
    for c in set(auc.condition):
        res.append((c, rconditions[c], auc[auc.condition == c].auc.values[0], 'all'))
    for c in set(auc[auc.phenotypes >= 10].condition):
        res.append((c, rconditions[c], auc[auc.condition == c].auc.values[0], '>= 10 phenotypes'))
    r = pd.DataFrame(res)
    r.columns = ['condition', 'category', 'auc', 'phenotypes']

    sns.boxplot(data=r[r.phenotypes == 'all'],
                x='auc',
                y='category',
                order=sorted(set(r.category),
                             key=lambda x: r[(r.category == x) &
                                             (r.phenotypes == 'all')].auc.median()),
                color=sns.xkcd_rgb['pale grey'])
    sns.swarmplot(data=r[r.phenotypes == 'all'],
                x='auc',
                y='category',
                order=sorted(set(r.category),
                             key=lambda x: r[(r.category == x) &
                                             (r.phenotypes == 'all')].auc.median()),
                color=sns.xkcd_rgb['dark grey'],
                alpha=0.5)
    plt.legend([])
    plt.axvline(0.5,
                color=sns.xkcd_rgb['grey'],
                linestyle='dashed')
    plt.xlim(0, 1)
    plt.ylabel('Condition category')
    plt.xlabel('AUC')
    sns.despine(left=True);

    plt.savefig(options.outfile,
                dpi=options.dpi)
