#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run constraint analysis"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_constraints')
    parser.add_argument('essential', action='store',
                        help='essential genes file')
    parser.add_argument('sizes', action='store',
                        help='uniprot sizes')
    parser.add_argument('features', action='store',
                        help='Features BED file')
    parser.add_argument('obsfeatures', action='store',
                        help='Observed features BED file')
    parser.add_argument('obsothers', action='store',
                        help='Observed others BED file')

    parser.add_argument('--bootstraps', action='store',
                        type=int,
                        default=100,
                        help='Bootstraps [Default: 100]')
    parser.add_argument('--flanking', action='store',
                        type=float,
                        default=None,
                        help='Use flanking regions [Default: 100]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

def density(observed, bases):
    return len(observed)/float(len(bases))

def cont(L):
    s = set()
    if len(L) == 1:
        yield set((L[0],))
        return
    for i, j in zip(L[:-1],
                    L[1:]):
        s.add(i)
        if j-i > 1:
            yield s
            s = set()
        else:
            s.add(j)
    s.add(j)
    yield s

if __name__ == "__main__":
    import sys
    import random
    import numpy as np
    import pandas as pd
    
    options = get_options()

    essential = [x.rstrip()
                 for x in open(options.essential)]
    sizes = {x.rstrip().split('\t')[0]: int(x.rstrip().split('\t')[1])
             for x in open(options.sizes)}

    features = {}
    for l in open(options.features):
        uniprot, start, stop, categ = l.rstrip().split('\t')
        if uniprot in essential:
            continue
        features[uniprot] = features.get(uniprot, set())
        for i in range(int(start), int(stop)):
            features[uniprot].add(i)

    flanking = {}
    if options.flanking is not None:
        for k, v in features.items():
            flanking[k] = set()
            for w in cont(sorted(v)):
                for i in range(int(min(w)-len(w)*options.flanking),
                               min(w)):
                    if i in v or i <= 0 or i > sizes[k]:
                        continue
                    flanking[k].add(i)
                for i in range(max(w)+1,
                               int(max(w)+len(w)*options.flanking)+1):
                    if i in v or i <= 0 or i > sizes[k]:
                        continue
                    flanking[k].add(i)

    others = {}
    for k, v in sizes.items():
        if k in essential or k not in features:
            continue
        others[k] = set()    
        for i in set(range(1, v+1)).difference(features[k]):
            others[k].add(i)

    mut_features = {}
    for l in open(options.obsfeatures):
        uniprot, start, stop, mut = l.rstrip().split('\t')
        mut_features[uniprot] = mut_features.get(uniprot, [])
        mut_features[uniprot].append(int(start))
    mut_others = {}
    for l in open(options.obsothers):
        uniprot, start, stop, mut = l.rstrip().split('\t')
        if options.flanking is not None and int(start) not in flanking.get(uniprot, set()):
            continue
        mut_others[uniprot] = mut_others.get(uniprot, [])
        mut_others[uniprot].append(int(start))

    mfeatures = []
    for k in features:
        v = mut_features.get(k, [])
        for i in v:
            mfeatures.append(i)
    lfeatures = []
    for k, v in features.items():
        for i in v:
            lfeatures.append(i)
    for r in range(options.bootstraps):
        lothers = []
        mothers = []
        for k in features:
            positions = list(others[k])
            random.shuffle(positions)
            positions = positions[:len(features[k])]
            for i in positions:
                lothers.append(i)
            v = mut_others.get(k, [])
            for i in v:
                if i not in positions:
                    continue
                mothers.append(i)
        
        variability = np.log2(density(mfeatures,
                                      lfeatures) /
                              density(mothers,
                                      lothers))
        print('\t'.join(('real', '',
                         str(variability))))

    for r in range(options.bootstraps):
        rfeatures = []
        rothers = []
        for k in features:
            positions = list(range(1, sizes[k]+1))
            random.shuffle(positions)
            for p in positions[:len(set(features[k]))]:
                if p in mut_features.get(k, []):
                    for j in range(mut_features[k].count(p)):
                        rfeatures.append(p)
                else:
                    for j in range(mut_others.get(k, []).count(p)):
                        rfeatures.append(p)
            for p in positions[len(set(features[k])):len(set(features[k]))*2]:
                if p in mut_features.get(k, []):
                    for j in range(mut_features[k].count(p)):
                        rothers.append(p)
                else:
                    for j in range(mut_others.get(k, []).count(p)):
                        rothers.append(p)
        
        variability = np.log2(density(rfeatures,
                                      lfeatures) /
                              density(rothers,
                                      lothers))
        print('\t'.join(('random', str(r),
                         str(variability))))
