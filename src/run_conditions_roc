#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_overall_roc')

    parser.add_argument('directory1')
    parser.add_argument('directory2')
    parser.add_argument('directory3')
    parser.add_argument('outfile')

    parser.add_argument('--only-all', action='store_true',
                        default=False,
                        help='Only all predictors')
    parser.add_argument('--unweighted', action='store_true',
                        default=False,
                        help='Unweighted score [Default: weighted]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=1,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

def get_boots(tag):
    d = {}
    d['normal'] = pd.read_table('%s/auc_score.2.txt' % tag, 
                                              header=None)
    d['normal'].columns = ['condition',
                               'sick', 'strains',
                               'stat', 'threshold',
                               'x', 'y', 'kind']
    return d

def get_w_boots(tag):
    d = {}
    d['normal'] = pd.read_table('%s/auc_weighted_score.2.txt' % tag, 
                                              header=None)
    d['normal'].columns = ['condition',
                               'sick', 'strains',
                               'stat', 'threshold',
                               'x', 'y', 'kind']
    return d

def compute_auc(group):
    return auc(group['x'], group['y'])

if __name__ == "__main__":
    import os
    import numpy as np
    import pandas as pd
    from sklearn.metrics import auc

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches
    import matplotlib

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    try:
        plt.style.use('custom.mplstyle')
    except IOError:
        plt.rc('font', size=10)
        plt.rc('xtick', labelsize=10)
        plt.rc('ytick', labelsize=10)
        plt.rc('axes', labelsize=12, titlesize=12)
        plt.rc('legend', fontsize=8)

    fig = plt.figure(figsize=(options.width, options.height))

    if not options.unweighted:
        w = {}
        w['snps'] = get_w_boots(options.directory1)
        w['accessory'] = get_w_boots(options.directory2)
        w['all'] = get_w_boots(options.directory3)
    else:
        w = {}
        w['snps'] = get_boots(options.directory1)
        w['accessory'] = get_boots(options.directory2)
        w['all'] = get_boots(options.directory3)

    k = 'snps'
    m1 = w[k]['normal']

    k = 'accessory'
    m2 = w[k]['normal']

    k = 'all'
    m3 = w[k]['normal']

    m4 = w[k]['normal']
    m4 = m4[m4.sick / m4.strains >= 0.01]

    m5 = w[k]['normal']
    m5 = m5[m5.sick / m5.strains >= 0.03]

    m6 = w[k]['normal']
    m6 = m6[m6.sick / m6.strains >= 0.05]

    if not options.only_all:
        data = [m1[m1.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m2[m2.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m3[m3.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m4[m4.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m5[m5.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m6[m6.kind == 'prec'].groupby('condition').max()['stat'].dropna(),]

        sns.boxplot(data=data,
                    orient='h',
                    color=sns.xkcd_rgb['pale grey'],
                    notch=True,
                    fliersize=0,
                    linewidth=2.5)
        sns.swarmplot(data=data,
                    orient='h',
                    color=sns.xkcd_rgb['grey'],
                    #palette=sns.color_palette('Greys', 8)[2:],
                    alpha=0.5)

        plt.plot([x.median() for x in data],
                 range(6),
                 'o-',
                 color=sns.color_palette('Reds_r', 3)[0],
                 markersize=10,
                 label='Median',
                 zorder=10)
        plt.plot([x.mean() for x in data],
                 range(6),
                 'o-',
                 color=sns.color_palette('Blues_r', 3)[0],
                 markersize=10,
                 label='Mean',
                 zorder=10)

        plt.yticks(range(6),
                   ['SNPs\n(SIFT + FoldX)',
                    'Accessory genome',
                    'All predictors',
                    'All predictors\n(>= 1% phenotypes)',
                    'All predictors\n(>= 3% phenotypes)',
                    'All predictors\n(>= 5% phenotypes)'],
                   rotation=0)
        plt.legend(loc=(0.80, 0.025), frameon=True)
        plt.xlim(-.01, 0.66)
        plt.xlabel('PR-AUC')
        sns.despine(left=True)

    else:
        ax = plt.subplot(111)

        data = [m3[m3.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m4[m4.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m5[m5.kind == 'prec'].groupby('condition').max()['stat'].dropna(),
                m6[m6.kind == 'prec'].groupby('condition').max()['stat'].dropna(),]

        sns.boxplot(data=data,
                    orient='h',
                    color=sns.xkcd_rgb['pale grey'],
                    notch=True,
                    fliersize=0,
                    linewidth=2.5)
        sns.swarmplot(data=data,
                    orient='h',
                    color=sns.xkcd_rgb['grey'],
                    #palette=sns.color_palette('Greys', 6)[2:],
                    alpha=0.5)

        line1, = plt.plot([x.median() for x in data],
                 range(4),
                 'o-',
                 color=sns.color_palette('Reds_r', 3)[0],
                 markersize=10,
                 label='Median',
                 zorder=10)
        line2, = plt.plot([x.mean() for x in data],
                 range(4),
                 'o-',
                 color=sns.color_palette('Blues_r', 3)[0],
                 markersize=10,
                 label='Mean',
                 zorder=10)

        plt.yticks(range(4),
                   ['All conditions\n(N={0})'.format(data[0].shape[0]),
                    '>= 1% phenotypes\n(N={0})'.format(data[1].shape[0]),
                    '>= 3% phenotypes\n(N={0})'.format(data[2].shape[0]),
                    '>= 5% phenotypes\n(N={0})'.format(data[3].shape[0])],
                   rotation=0)
        h, l = ax.get_legend_handles_labels()
        h = h[2:] + h[:2]
        l = l[2:] + l[:2]
        plt.legend(handles=h,
                   labels=l,
                   loc=(0, 1),
                   frameon=True,
                   ncol=2)
        plt.xlim(-0.008, 0.515)
        plt.xlabel('PR-AUC')
        sns.despine(left=True)

    plt.savefig(options.outfile,
                dpi=options.dpi)
