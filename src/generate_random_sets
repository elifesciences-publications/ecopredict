#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Generate score matrices using random genes"
    parser = argparse.ArgumentParser(description=description,
                                     prog='generate_random_sets')

    parser.add_argument('probabilities', action='store',
                        help='Deleterious probabilities file')
    parser.add_argument('deletion', action='store',
                        help='Deletion experiment important genes (conditions -> genes)')
    parser.add_argument('delmatrix', action='store',
                        help='Deletion matrix (used to get gene names)')
    parser.add_argument('matrix', action='store',
                        help='EMAP matrix')

    parser.add_argument('--fdr', action='store',
                        default=None,
                        help='FDR correction matrix (triggers weighted scoring)')
    parser.add_argument('--conditions', action='store',
                        default=None,
                        help='Conditions conversion (might be necessary if --fdr called)')

    parser.add_argument('--conversion', action='store',
                        default=None,
                        help='ECK to uniprot identifiers')
    parser.add_argument('--lconversion', action='store',
                        default=None,
                        help='Locus to uniprot identifiers')
    parser.add_argument('--uncommon', action='store',
                        default=None,
                        help='Genes to exclude from the gene sets')
    parser.add_argument('--pseudocount', action='store',
                        type=float,
                        default=0.01,
                        help='Pseudocount [Default: 0.01]')

    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


def expected(values, pseudo):
    return sum(np.log(1 - values + pseudo))/values.shape[0]


def score(values, genes, pseudo):
    return sum(np.log(1 - values.loc[genes].dropna() + pseudo)/expected(values,
               pseudo))
               
def weighted_score(values, genes, pvals, gsum, gmax, pseudo):
    corr = -(np.log10(pvals.dropna()).replace([np.inf, -np.inf], np.nan).dropna() * gsum) / gmax
    logvalues = (np.log(1 - values.loc[genes].dropna() + 0.0).dropna().T * corr).dropna().T
    return sum(logvalues/expected(values,
                                  pseudo))

if __name__ == "__main__":
    import sys
    import random
    import numpy as np
    import pandas as pd

    options = get_options()

    # Read strains data
    a = pd.read_table(options.matrix)
    a.set_index(a.columns[0], inplace=True)

    conversion = {}
    if options.conversion:
        conversion = {x.split()[0]:x.rstrip().split()[1]
                      for x in open(options.conversion)}
    lconversion = {}
    if options.lconversion:
        lconversion = {x.split()[0]:x.rstrip().split()[1]
                       for x in open(options.lconversion)}
    uncommon = {}
    if options.uncommon:
        uncommon = {lconversion.get(x.rstrip(), x.rstrip())
                    for x in open(options.uncommon)}
    deletion = {x.split()[0]:{conversion.get(y.split('-')[0], y.split('-')[0])
                              for y in x.rstrip().split('\t')[1].split()
                              if conversion.get(y.split('-')[0], y.split('-')[0]) not in uncommon}
                for x in open(options.deletion)
                if len(x.split()) > 1}

    dm = pd.read_table(options.delmatrix)
    dm.set_index(dm.columns[0], inplace=True)
    dgenes = list({conversion.get(x.split('-')[0], x.split('-')[0])
                  for x in dm.index
                  if conversion.get(x.split('-')[0], x.split('-')[0]) not in uncommon})
    rgenes = list({conversion.get(x.split('-')[0], x.split('-')[0])
                  for x in dm.index
                  if conversion.get(x.split('-')[0], x.split('-')[0]) not in uncommon})

    if options.fdr is not None:
        f = pd.read_table(options.fdr)
        f.set_index(f.columns[0], inplace=True)
        g = pd.read_table(options.fdr)
        g.set_index(g.columns[0], inplace=True)
        g[g > 0.05] = 9999
        g[g <= 0.05] = 1
        g[g == 9999] = 0

        f.index = [conversion.get(x.split('-')[0],
                                  x.split('-')[0])
                   for x in f.index]
        g.index = [conversion.get(x.split('-')[0],
                                  x.split('-')[0])
                   for x in g.index]

        g = g.T.sum() / g.shape[1]

        gmax = pd.Series(
                -np.log10(f.values.flatten())
                ).replace([np.inf,
                           -np.inf],
                           np.nan).dropna().max() * g.max()

        conditions = {x.rstrip().split()[0]: x.rstrip().split()[1]
                      for x in open(options.conditions)}

    
    m = pd.read_table(options.probabilities)
    m.set_index(m.columns[0], inplace=True)
    m[np.isnan(m)] = 0.

    d = {}
    random.shuffle(rgenes)
    for g1, g2 in zip(dgenes, rgenes):
        d[g1] = g2
    
    # random gene sets with same numerosity
    rsets = {}
    for c in deletion:
        if c not in set(a.columns):
            continue
        rsets[c] = {d[x] for x in deletion[c]
                    if x in d}
                    
    ps = []
    for k, genes in rsets.items():
        try:
            if options.fdr is None:
                p = m.apply(score, genes=genes, pseudo=options.pseudocount)
            else:
                if conditions.get(k, None) is None:
                    continue
                k1 = conditions[k]
                p = m.apply(weighted_score,
                            genes=genes,
                            pvals=f[k1].loc[genes],
                            gsum=g.loc[genes],
                            gmax=gmax,
                            pseudo=options.pseudocount)
            p = pd.DataFrame(p).T
            p.index = [k]
            ps.append(p)
        except KeyError:
            # Very rare, means that none of the genes was found
            continue
    s = pd.concat(ps)
    s.index.name = 'condition'
   
    s.to_csv(sys.stdout,
             sep='\t')
