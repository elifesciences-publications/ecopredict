#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse

    # create the top-level parser
    description = "Get all the non-synonymous mutations from a uniprot table"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'mutations2nonsyn')
    parser.add_argument('mutations', action='store',
                        help='Annotated mutations tsv file')
    parser.add_argument('tolerated', action='store',
                        help='Tolerated mutations output file')
    parser.add_argument('deleterious', action='store',
                        help='Deleterious mutations output file')
    
    parser.add_argument('--essential', action='store',
                        default=None,
                        help='essential nonsyn muts. file')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import sys
    import os
    import random
    random.seed(1)

    options = get_options()

    tol = open(options.tolerated, 'w')
    dele = open(options.deleterious, 'w')
        
    itol = 0
    idel = 0
    for l in open(options.mutations):
        if l.startswith('#'):
            continue

        uniprot, pos1, pos2, del_tol, mut = l.rstrip().split('\t')[:5]
        
        if int(pos1) != int(pos2):
            continue
        elif mut.startswith('Missing'):
            continue
        elif len(mut.split('->')[0]) > 1:
            continue

        for var in mut.split('->')[1].split(':')[0].split(','):
            if len(var) > 1:
                continue

            if del_tol == '':
                dele.write('%s%d%s\t%s\n'%(mut.split('->')[0], int(pos1), var, uniprot))
                idel += 1
            else:
                tol.write('%s%d%s\t%s\n'%(mut.split('->')[0], int(pos1), var, uniprot))
                itol += 1

    if options.essential is not None and itol < idel:
        muts = [x for x in open(options.essential)]
        while itol < idel:
            tol.write(random.choice(muts))
            itol += 1

    tol.close()
    dele.close()
