#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run follow-up overall plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_overall_follow_up')

    parser.add_argument('simulate')
    parser.add_argument('eckconversion')
    parser.add_argument('genbank')
    parser.add_argument('outfile')

    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width [Default: 1 inches]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=1,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


if __name__ == "__main__":
    import os
    import numpy as np
    import pandas as pd
    from Bio import SeqIO

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    try:
        plt.style.use('custom.mplstyle')
    except IOError:
        plt.rc('font', size=10)
        plt.rc('xtick', labelsize=10)
        plt.rc('ytick', labelsize=10)
        plt.rc('axes', labelsize=12, titlesize=12)
        plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.width, options.height))

    conversion = {x.split('\t')[0]:x.rstrip().split()[1]
                  for x in open(options.eckconversion)}
                  
    ep = {}
    en = {}
    for s in SeqIO.parse(options.genbank, 'genbank'):
        for f in s.features:
            if 'gene_synonym' not in f.qualifiers or f.type != 'CDS':
                continue
            loc = list(filter(lambda x: x.strip().startswith('ECK'),
                              f.qualifiers['gene_synonym'][0].split(';')))[0].strip()
            loc = conversion.get(loc, loc)
            en[loc] = f.qualifiers.get('gene', [''])[0]
            ep[loc] = f.qualifiers.get('product', [''])[0]
            
    res = []
    for c in os.listdir(options.simulate):
        try:
            sim = pd.read_table(os.path.join(options.simulate, c),
                      header=None,
                      names=['condition',
                             'protein',
                             'strain',
                             'dscore',
                             'pscore',
                             'ascore',
                             'drank',
                             'prank'])
        except OSError:
            print(c)
            continue
        except ValueError:
            print(c)
            continue
        sim.pscore = pd.to_numeric(sim.pscore,
                                   errors='coerce')
        
        for p in set(sim.set_index('strain').protein):
            if str(p) == 'nan':
                continue
            for strain, v in sim[sim.protein == p][['strain', 'ascore']].values:
                res.append((c, p,
                            strain,
                            v))
    
    r = pd.DataFrame(res)
    r.columns = ['condition',
                 'protein',
                 'strain',
                 'recoverability']
    r = r.dropna()
    
    rr = r[r.recoverability <= -0.01].groupby('protein').count()['condition']
    
    dgenes = {'P0A9E2': (50, 0.025),
              'P0AGC3': (10, 0.007),
              'P0A7B5': (50, 0.015),
              'P07004': (50, 0.010),
              'P0ACS2': (50, 0.020),
              'P31224': (10, 0.009),
              'P0AE06': (10, 0.009),
              'P27249': {10, 0.007}}

    sns.kdeplot(rr,
                color='k',
                shade=True)
    sns.rugplot(rr.loc[dgenes.keys()].dropna(),
                color='r',
                height=0.1,
                lw=3)
    for g, (x, y) in dgenes.items():
        try:
            plt.annotate(en.get(g, g),
                         xy=(rr.loc[g], 0.0035),
                         xytext=(rr.loc[g]+x, max(0.007, y)),
                         arrowprops=dict(facecolor='black', 
                                         arrowstyle="-"))
        except KeyError:
            pass

    plt.legend('')
    plt.xlabel('Predicted phenotypic restorations per gene')
    plt.xlim(0, 1100)
    plt.yticks([])
    sns.despine(left=True)
    
    plt.savefig(options.outfile,
                dpi=options.dpi);
