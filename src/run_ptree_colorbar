#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run tree plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_tree_colorbar_plot')
    parser.add_argument('tree', action='store',
                        help='tree file')
    parser.add_argument('matrix', action='store',
                        help='')
    parser.add_argument('fdr', action='store',
                        help='')
    parser.add_argument('outfile', action='store',
                        help='')

    parser.add_argument('--width', action='store',
                        type=float,
                        default=7,
                        help='Figure width [Default: 7 inches]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=0.3,
                        help='Figure height [Default: 0.3 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=90,
                        help='DPI [Default: 90]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()
    
    import matplotlib.pyplot as plt
    import seaborn as sns

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')

    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    import pandas as pd
    import numpy as np
    import ete3

    tree = ete3.Tree(options.tree)
    strains = {x.name.split('.fasta')[0].replace("'", '').split('_')[0]
               for x in tree.traverse()}
    a = pd.read_table(options.matrix)
    a.set_index(a.columns[0], inplace=True)
    f = pd.read_table(options.fdr)
    f.set_index(f.columns[0], inplace=True)
    v = a[a < 0][f < 0.05]
    v1 = a[a > 0][f < 0.05]
    
    conditions = []
    cond = {}
    for x in strains:
        try:
            conditions.append(a.loc[x].dropna().shape[0])
            cond[x] = a.loc[x].dropna().shape[0]
        except:
            pass
    phen = []
    for x in v.index:
        if x not in cond:
            continue
        phen.append(int(v.loc[x].T.dropna().shape[0] * 1000 / float(cond[x])))
    phen1 = []
    for x in v1.index:
        if x not in cond:
            continue
        phen1.append(int(v1.loc[x].T.dropna().shape[0] * 1000 / float(cond[x])))
    mconditions = int(max(conditions))*2 
    mphen = int(max(phen))
    mphen1 = int(max(phen1))

    plt.figure(figsize=(options.width, options.height))

    plt.subplot(121)
    gradient = np.linspace(0, int(max(conditions)/2.), int(max(conditions)/2.))
    gradient = np.vstack((gradient, gradient))
    plt.imshow(gradient, aspect='auto', cmap=plt.get_cmap('Greys'),
               vmax=mconditions)

    plt.xticks(range(0, int(max(conditions)/2.), int(max(conditions)/2.)/6),
               [str(x) for x in range(0, int(max(conditions)/2.), int(max(conditions)/2.)/6)])
    plt.yticks([])
    plt.title('Tested conditions')

    plt.subplot(122)
    gradient = np.linspace(0, mphen, mphen)
    gradient = np.vstack((gradient, gradient))
    plt.imshow(gradient, aspect='auto', cmap=plt.get_cmap('Reds'),
               vmax=mphen)

    plt.xticks(range(0, mphen, mphen/6),
               [str(x) for x in range(0, mphen, mphen/6)])
    plt.yticks([])
    plt.title('Sick phenotypes')

    plt.savefig(options.outfile, dpi=options.dpi)
