#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Remove commonly present mutations"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'common_mutations')

    parser.add_argument('vepdir', action='store',
                        help='VEP directory')

    parser.add_argument('--proportion', action='store',
                        type=float,
                        default=0.8,
                        help='Strains proportion cutoff [Default: 0.8]')
    parser.add_argument('--exclude', action='store',
                        default=None,
                        help='Strains to be excluded [Default: consider all]')
    parser.add_argument('--clusters', action='store',
                        default=None,
                        help='Strains clusters [Default: consider them separately]')
    parser.add_argument('--matrix', action='store',
                        default=None,
                        help='Save variants matrix')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import os
    import numpy as np
    import pandas as pd

    options = get_options()

    # Strains to be excluded
    exclude = set()
    try:
        for l in open(options.exclude):
            exclude.add( l.rstrip() )
    except:
        pass

    cl = {}
    i = 0
    if options.clusters is not None:
        for l in open(options.clusters):
            for strain in l.rstrip().split():
                cl[strain] = i
            i += 1

    d = {}
    for f in os.listdir(options.vepdir):
        # Excluded?
        if f.split('_')[0] in exclude:
            continue
        # Exclude directories
        if not os.path.isdir(os.path.join(options.vepdir, f)):
            continue
        for l in open(os.path.join(options.vepdir, f, 'nonsynmuts.tsv')):
            s = f.split('_')[0]
            mut, uniprot = l.rstrip().split('\t')[:2]
            d[ (uniprot, mut) ] = d.get( (uniprot, mut), {} )
            s = cl.get(s, s)
            if s in d.get((uniprot, mut), []):
                continue
            d[ (uniprot, mut) ][s] = d[ (uniprot, mut) ].get(f, 0)
            d[ (uniprot, mut) ][s] += 1
    
    variants = pd.DataFrame(d)
    variants.replace(np.nan, 0, regex=True, inplace=True)
    svar = variants.sum()
    
    for uniprot, mut in svar[svar > variants.shape[0] * options.proportion].index:
        print('\t'.join( (uniprot, mut) ))

    if options.matrix is not None:
        svar.to_csv(options.matrix, sep='\t')
