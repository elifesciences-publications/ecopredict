#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run tree plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_tree_colorbar_plot')
    parser.add_argument('tree', action='store',
                        help='tree file')
    parser.add_argument('nonsyn', action='store',
                        help='nonsyn file')
    parser.add_argument('pangenome', action='store',
                        help='pangenome file')
    parser.add_argument('outfile', action='store',
                        help='Foldx accessibility file')

    parser.add_argument('--width', action='store',
                        type=float,
                        default=7,
                        help='Figure width [Default: 7 inches]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=0.3,
                        help='Figure height [Default: 0.3 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=90,
                        help='DPI [Default: 90]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()
    
    import matplotlib.pyplot as plt
    import seaborn as sns

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')

    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    import numpy as np
    import ete3

    tree = ete3.Tree(options.tree)
    strains = {x.name.split('.fasta')[0].replace("'", '')
               for x in tree.traverse()}
    nonsyn = {int(x.rstrip().split()[1])
              for x in open(options.nonsyn)
              if x.rstrip().split()[0] in strains}
    mnonsyn = max(nonsyn)
    reference = {int(x.rstrip().split()[2])
              for x in open(options.pangenome)
              if x.rstrip().split()[0] in strains}
    mreference = max(reference)
    target = {int(x.rstrip().split()[3])
              for x in open(options.pangenome)
              if x.rstrip().split()[0] in strains}
    mtarget = max(target)

    plt.figure(figsize=(options.width, options.height))

    plt.subplot(131)
    gradient = np.linspace(0, mnonsyn, mnonsyn)
    gradient = np.vstack((gradient, gradient))
    plt.imshow(gradient, aspect='auto', cmap=plt.get_cmap('Blues'),
               vmax=mnonsyn)

    plt.xticks((0, mnonsyn/2, mnonsyn),
               [str(x) for x in (0, mnonsyn/2, mnonsyn)])
    plt.yticks([])
    plt.title('Non-syn. mutations')

    plt.subplot(132)
    gradient = np.linspace(0, mreference, mreference)
    gradient = np.vstack((gradient, gradient))
    plt.imshow(gradient, aspect='auto', cmap=plt.get_cmap('Greens'),
               vmax=mreference)

    plt.xticks((0, mreference/2, mreference),
               [str(x) for x in (0, mreference/2, mreference)])
    plt.yticks([])
    plt.title('Missing reference genes')

    plt.subplot(133)
    gradient = np.linspace(0, mtarget, mtarget)
    gradient = np.vstack((gradient, gradient))
    plt.imshow(gradient, aspect='auto', cmap=plt.get_cmap('Purples'),
               vmax=mtarget)

    plt.xticks((0, mtarget/2, mtarget),
               [str(x) for x in (0, mtarget/2, mtarget)])
    plt.yticks([])
    plt.title('Additional genes')
    
    plt.savefig(options.outfile, dpi=options.dpi)
