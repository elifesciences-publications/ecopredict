#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'

def get_options():
    import argparse
    import sys

    # create the top-level parser
    description = "Remove uncommonly present genes"
    parser = argparse.ArgumentParser(description = description,
                                     prog = 'uncommon_genes')

    parser.add_argument('orthdir', action='store',
                        help='Orthologs directory')

    parser.add_argument('--proportion', action='store',
                        type=float,
                        default=0.2,
                        help='Strains proportion cutoff [Default: 0.2]')
    parser.add_argument('--exclude', action='store',
                        default=None,
                        help='Strains to be excluded [Default: consider all]')
    parser.add_argument('--clusters', action='store',
                        default=None,
                        help='Strains clusters [Default: consider them separately]')
    parser.add_argument('--matrix', action='store',
                        default=None,
                        help='Save gene counts')
    
    parser.add_argument('--version', action='version',
                         version='%(prog)s '+__version__)

    return parser.parse_args()

def parse_orthologs(infile, conversion=None):
    if conversion is None:
        conversion = {}
    d = {}
    for l in open(infile):
        if l.strip().startswith('#'):
            continue
        orth, prot, org = l.strip().split()
        d[orth] = d.get(orth, set())
        d[orth].add( (conversion.get(prot, prot), org) )
    return d

if __name__ == "__main__":
    import os

    options = get_options()

    # Strains to be excluded
    exclude = set()
    try:
        for l in open(options.exclude):
            exclude.add( l.rstrip().split('_')[0] )
    except:
        pass

    cl = {}
    rcl = {}
    i = 0
    if options.clusters is not None:
        for l in open(options.clusters):
            for strain in l.rstrip().split():
                cl[strain] = i
                rcl[i] = rcl.get(i, set())
                rcl[i].add(strain)
            i += 1

    d = {}
    files = [x for x in os.listdir(options.orthdir)
             if x.endswith('.pangenome.tsv')]
    for f in files:
        gid = os.path.split(f)[-1].split('_')[0]
        if gid in exclude:
            continue
        d[gid] = d.get(gid, [])
        d[gid].append(f)
    for k in d:
        d[k] = sorted(d[k])[0]

    prefreq = {}
    freq = {}
    for k, infile in d.items():
        k = cl.get(k, k)
        prefreq[k] = {}
        orth = parse_orthologs(os.path.join(options.orthdir, infile))
        for group, genes in orth.items():
            if 'target' not in {x[1] for x in genes}:
                for gene in {x[0] for x in genes}:
                    if options.clusters is not None:
                        if gene in prefreq[k]:
                            continue
                        prefreq[k][gene] = 1
                    else:
                        freq[gene] = freq.get(gene, 0)
                        freq[gene] += 1
    if options.clusters is not None:
        for k, genes in prefreq.items():
            for gene in genes:
                freq[gene] = freq.get(gene, 0)
                freq[gene] += 1
        for k in freq:
            freq[k] = freq[k]/float(len(rcl))
    else:
        for k in freq:
            freq[k] = freq[k]/float(len(d))

    for k, v in freq.items():
        if v >= options.proportion:
            print(k)

    if options.matrix is not None:
        o = open(options.matrix, 'w')
        for k, v in freq.items():
            o.write('%s\t%.5f\n' % (k, v))
        o.close()
