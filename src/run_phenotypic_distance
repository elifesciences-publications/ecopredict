#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_phenotypes_plot')
    parser.add_argument('matrix', action='store',
                        help='matrix file')
    parser.add_argument('fdr', action='store',
                        help='fdr file')
    parser.add_argument('tree', action='store',
                        help='tree file')
    parser.add_argument('evolution', action='store',
                        help='Evolution experiment file')
    parser.add_argument('outfile', action='store',
                        help='Output file')

    parser.add_argument('--size', action='store',
                        type=int,
                        default=1,
                        help='Figure size multiplier [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import numpy as np
    import pandas as pd
    from scipy import stats
    from Bio import Phylo
    from nadist.pure.spatial import euclidean_pdist
    from scipy.spatial.distance import pdist, squareform

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    try:
        plt.style.use('custom.mplstyle')
    except IOError:
        plt.rc('font', size=10)
        plt.rc('xtick', labelsize=10)
        plt.rc('ytick', labelsize=10)
        plt.rc('axes', labelsize=12, titlesize=12)
        plt.rc('legend', fontsize=8)

    evol = {x.rstrip()
            for x in open(options.evolution)}

    t = Phylo.read(options.tree, 'newick')
    ref = None
    for x in t.get_terminals():
        x.name = x.name.split('_')[0]
        if 'genome' in x.name:
            x.name = 'NT12001'
            ref = x
    strains = {x.name for x in t.get_terminals()}

    a = pd.read_table(options.matrix)
    a.set_index(a.columns[0],
                inplace=True)
    f = pd.read_table(options.fdr)
    f.set_index(f.columns[0],
                inplace=True)
    a = a.loc[strains]
    f = f.loc[strains]
    v = a[a < 0][f < 0.05]
    v[np.invert(np.isnan(v))] = 1
    v[np.isnan(v)] = 0
    v[np.isnan(a)] = np.nan

    p = squareform(euclidean_pdist(a.values))
    p = pd.DataFrame(p,
                     index=a.index,
                     columns=a.index)

    res = []
    for s in strains:
        if s == 'NT12001':
            continue
        res.append((s, t.distance(ref.name, s), p.loc['NT12001', s]))
    r = pd.DataFrame(res)
    r.columns = ['strain', 'phylo', 'pheno']
    r.set_index('strain', inplace=True)
    r.dropna(inplace=True)    

    plt.figure(figsize=(3*options.size,
                        3*options.size))

    plt.plot(r.loc[strains - evol].phylo,
             r.loc[strains - evol].pheno,
             'k.',
             label='_')
    plt.plot(r.loc[evol].phylo,
             r.loc[evol].pheno,
             'r.',
             label='Evolution experiment')

    l = stats.linregress(r.phylo,
                         r.pheno)
    print(l.rvalue, l.pvalue)
    #fn = l.intercept + l.slope * np.linspace(0, r.phylo.max())
    #plt.plot(np.linspace(0, r.phylo.max()),
    #         fn,
    #         '--',
    #         color='grey',
    #         label='All strains (r=%.2f)' % l.rvalue)
    l = stats.linregress(r.loc[strains - evol].dropna().phylo,
                         r.loc[strains - evol].dropna().pheno)
    print(l.rvalue, l.pvalue)
    fn = l.intercept + l.slope * np.linspace(0, r.phylo.max())
    plt.plot(np.linspace(0, r.phylo.max()),
             fn,
             'k--',
             label='Pearson\'s r: %.2f' % l.rvalue)

    plt.legend(loc='upper right',
               bbox_to_anchor=(1.1, 1),
               frameon=True)

    plt.xlabel('Phylogenetic distance')
    plt.ylabel('Phenotypic distance')

    sns.despine()
    plt.tight_layout()

    plt.savefig(options.outfile,
                dpi=options.dpi)
