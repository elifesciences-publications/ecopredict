#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Collect bootstraps"
    parser = argparse.ArgumentParser(description=description,
                                     prog='collect_overall_random_bootstraps')

    parser.add_argument('folder', action='store',
                        help='bootstraps folder')

    parser.add_argument('--curve', action='store_true',
                        default=False,
                        help='Output representative curve [Default: auc only]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

def mad(data, axis=None):
    return np.median(np.absolute(data - np.median(data, axis)), axis)

if __name__ == "__main__":
    import os
    import pandas as pd
    import numpy as np

    options = get_options()
    
    res = []
    px = np.linspace(0, 1, 15)
    folders = os.listdir(options.folder)
    for d in folders:
        boots = os.listdir(os.path.join(options.folder, d))
        for b in boots:
            bootstrap = pd.read_table(os.path.join(options.folder, d, b),
                                      header=None)
            bootstrap.columns = ['auc', 'tpr', 'fpr']
            if not options.curve:
                auc = bootstrap.auc.values[0]
                print(auc)
            else:
                py = np.interp(px,
                               bootstrap['fpr'],
                               bootstrap['tpr'])
                res.append(py)
    if options.curve:
        r = np.array(res)
        for x, y, m in zip(px,
                           np.median(r, axis=0),
                           mad(r, axis=0)):
            print('\t'.join((str(x), str(y), str(m))))
