#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_specific_conditions_roc')

    parser.add_argument('roc')
    parser.add_argument('outfile')

    parser.add_argument('--condition', action='store',
                        nargs='*',
                        help='Condition to plot')
    parser.add_argument('--cname', action='store',
                        nargs='*',
                        help='Condition names')
    parser.add_argument('--size', action='store',
                        type=float,
                        default=1,
                        help='Figure size [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


if __name__ == "__main__":
    import pandas as pd
    from sklearn.metrics import auc as fauc

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.size, options.size))

    auc = pd.read_table(options.roc,
                        header=None)
    auc.columns = ['condition', 'auc', 'tpr', 'fpr', 'phenotypes']

    for c, cname, color in zip(options.condition,
                               options.cname,
                               sns.color_palette('Reds_r', len(options.condition)+1)):
        df = auc[auc.condition == c]
        plt.plot(df.fpr,
                 df.tpr,
                 '-',
                 color=color,
                 linewidth=2.5,
                 label='%s (%.2f)' % (cname, df.auc.values[0]),
                 zorder=10)

    plt.legend(loc='lower right')
    plt.plot([0, 1],
             [0, 1],
             '--',
             color=sns.xkcd_rgb['grey'])
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate');

    plt.savefig(options.outfile,
                dpi=options.dpi)
