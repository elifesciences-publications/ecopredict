#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_specific_conditions_roc')

    parser.add_argument('roc')
    parser.add_argument('bootstrap')
    parser.add_argument('outfile')

    parser.add_argument('--condition', action='store',
                        nargs='*',
                        help='Condition to plot')
    parser.add_argument('--cname', action='store',
                        nargs='*',
                        help='Condition names')
    parser.add_argument('--roc-curve', action='store_true',
                        default=False,
                        help='Plot ROC curve [Default: precision-recall curve]')
    parser.add_argument('--size', action='store',
                        type=float,
                        default=1,
                        help='Figure size [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


def interpolate(values):
    values = values.sort_values('x')
    return pd.Series(np.interp(np.linspace(0, 1, 10),
                     values['x'],
                     values['y']),
                    index=np.linspace(0, 1, 10))


if __name__ == "__main__":
    import os
    import numpy as np
    import pandas as pd
    from sklearn.metrics import auc as fauc

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    try:
        plt.style.use('custom.mplstyle')
    except IOError:
        plt.rc('font', size=10)
        plt.rc('xtick', labelsize=10)
        plt.rc('ytick', labelsize=10)
        plt.rc('axes', labelsize=12, titlesize=12)
        plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.size, options.size))

    auc = pd.read_table(options.roc,
                        header=None)
    auc.columns = ['condition', 'sick', 'strains', 'stat', 'threshold', 'x', 'y', 'kind']
    if not options.roc_curve:
        auc = auc[auc.kind == 'prec']
    else:
        auc = auc[auc.kind == 'roc']

    for c, cname, color in zip(options.condition,
                               options.cname,
                               sns.color_palette('Set2', len(options.condition)+1)):
        cname = cname.replace('uM', '$\mu$M').replace('ug', '$\mu$g')
        df = auc[auc.condition == c]
        plt.plot(df.x,
                 df.y,
                 '-',
                 color=color,
                 linewidth=2.5,
                 label='%s' % (cname),
                 zorder=10)
        m3 = []
        directory = options.bootstrap
        for i, d in enumerate(os.listdir(directory)):
            for f in os.listdir(os.path.join(directory, d)):
                print(i, f)
                v = pd.read_table(os.path.join(directory, d, f), header=None)
                v.columns = ['condition', 'sick', 'strains', 'stat', 'threshold', 'x', 'y', 'kind']
                v.set_index('condition', inplace=True)
                if not options.roc_curve:
                    v = v[v['kind'] == 'prec']
                else:
                    v = v[v['kind'] == 'roc']
                m3.append(interpolate(v.loc[c]).to_frame().T)
        m3 = pd.concat(m3)
        plt.errorbar(m3.columns,
                     m3.mean(),
                     yerr=m3.mad()/2.,
                     color=color,
                     fmt='--',
                     label='_',
                     zorder=0,
                     alpha=0.5)

    if not options.roc_curve:
        plt.legend(loc='upper right', frameon=True)
        plt.xlabel('Recall')
        plt.ylabel('Precision')
    else:
        plt.plot([0, 1],
                 [0, 1],
                 '--',
                 color='grey',
                 zorder=0,
                 label='Random predictor')
        plt.legend(loc='lower right', frameon=True)
        plt.xlabel('False positive rate')
        plt.ylabel('True positive rate')

    plt.xlim(0, 1)
    plt.ylim(0, 1)

    plt.savefig(options.outfile,
                dpi=options.dpi)
