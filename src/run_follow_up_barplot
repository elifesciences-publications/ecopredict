#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run follow-up overall plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_overall_follow_up')

    parser.add_argument('eckconversion')
    parser.add_argument('genbank')
    parser.add_argument('strains')
    parser.add_argument('strainsnames')
    parser.add_argument('experiment')
    parser.add_argument('data')
    parser.add_argument('simulate')
    parser.add_argument('condition')
    parser.add_argument('cname')
    parser.add_argument('gene')    
    parser.add_argument('outfile')

    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width (multiplied by number of strains) [Default: 1 inche]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=2.5,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


def plot_condition_sim(cond, num, title):
    if cond == 'MECILLINAM':
        cond1 = 'MECILLINAM.CEPHALEXIN'
    else:
        cond1 = cond
    sim = pd.read_table(os.path.join(options.simulate, cond1),
                  header=None,
                  names=['condition',
                         'gene',
                         'strain',
                         'dscore',
                         'pscore',
                         'ascore',
                         'drank',
                         'prank'])
    
    cond, gene, prots, ref, refp, dels, delsp, targets, targetsp = exp[(exp.condition == cond) &
                                                                       (exp.gene == num)].values[0] 
    
    order = ['BW25113']
    res = []
    for v in df.loc[ref, (cond, '1')]:
        res.append((cond, 'BW25113', 'empty', v))
    for v in df.loc[refp, (cond, '1')]:
        res.append((cond, 'BW25113', gene, v))
    for d, p, k in zip(dels.split(','), prots.split(','), range(1, len(dels.split(','))+1)):
        if len(set(prots.split(','))) == 1 and len(dels.split(',')) > 1:
            tag = 'BW25113\n$\Delta$%s (%d)' % (en.get(p, p), k)
        else:
            tag = 'BW25113\n$\Delta$%s' % en.get(p, p)
        order.append(tag)
        for v in df.loc[d, (cond, '1')]:
            res.append((cond, tag, 'empty', v))
    for d, p, k in zip(delsp.split(','), prots.split(','), range(1, len(delsp.split(','))+1)):
        if len(set(prots.split(','))) == 1 and len(delsp.split(',')) > 1:
            tag = 'BW25113\n$\Delta$%s (%d)' % (en.get(p, p), k)
        else:
            tag = 'BW25113\n$\Delta$%s' % en.get(p, p)
        for v in df.loc[d, (cond, '1')]:
            res.append((cond, tag, gene, v))
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank <= -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_strains:
                order.append(sname[strains[d]])
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, sname[strains[d]], 'empty', v))
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank <= -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_targets:
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, sname[strains[d]], gene, v))
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank > -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_strains:
                if dexp[d] != gene:
                    continue
                name = sname[strains[d]]
                order.append(name)
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, name, 'empty', v))
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank > -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_targets:
                if dexp[d] != gene:
                    continue
                name = sname[strains[d]]
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, name, gene, v))
    diff_comp = 0
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank > -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_strains:
                if dexp[d] == gene:
                    continue
                diff_comp += 1
                name = '%s\n(%s)' % (sname[strains[d]], dexp[d])
                order.append(name)
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, name, 'empty', v))
    for strain in set(o[(o.condition == cond) &
                        (o.gene == gene) &
                        (o.srank > -0.01)].strain):
        for d in rstrains.loc[strain].values:
            if d in all_targets:
                if dexp[d] == gene:
                    continue
                name = '%s\n(%s)' % (sname[strains[d]], dexp[d])
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, name, gene, v))
            
    r = pd.DataFrame(res)
    r.columns = ['condition', 'strain', 'plasmid', 'size']
    
    plt.figure(figsize=(options.width*len(set(r.strain)), options.height))

    barplot = sns.barplot(data=r,
                          x='strain',
                          y='size',
                          hue='plasmid',
                          color=sns.xkcd_rgb['pale red'])
    barplot.patches[0].set_color(sns.xkcd_rgb['light grey'])
    barplot.patches[len(set(r.strain))].set_color(sns.xkcd_rgb['grey'])
    for i in range(1, len(dels.split(','))+1):
        barplot.patches[i].set_color(sns.xkcd_rgb['light grey'])
        barplot.patches[len(set(r.strain))+i].set_color(sns.xkcd_rgb['grey'])
    i += 1
    for j in range(i, i+len(set(o[(o.condition == cond) &
                                  (o.gene == gene) &
                                  (o.srank <= -0.01)].strain))):
        barplot.patches[j].set_color((0.97430555555555542, 0.92812500000000009, 0.92569444444444449, 1.0))
        barplot.patches[len(set(r.strain))+j].set_color(sns.xkcd_rgb['pale red'])
    try:
        i = j + 1
    except:
        pass
    for j in range(i, i+len(set(o[(o.condition == cond) &
                                  (o.gene == gene) &
                                  (o.srank > -0.01)].strain))):
        try:
            barplot.patches[j].set_color(sns.xkcd_rgb['pale green'])
            barplot.patches[len(set(r.strain))+j].set_color(sns.xkcd_rgb['green'])
        except:
            pass
    try:
        i = j + 1
    except:
        pass
    for j in range(j-diff_comp+1, j+1):
        try:
            barplot.patches[j].set_color(sns.xkcd_rgb['pale blue'])
            barplot.patches[len(set(r.strain))+j].set_color(sns.xkcd_rgb['light blue'])
        except:
            barplot.patches[len(set(r.strain))].set_color(sns.xkcd_rgb['grey'])
    
    ph = barplot.get_ylim()[1]
    plt.ylim(0, ph+ph*0.15)
    for strain, i in zip(order, range(len(order))):
        t = stats.ttest_ind(r[(r.strain == strain) &
                              (r.plasmid == 'empty')]['size'].dropna(),
                            r[(r.strain == strain) &
                              (r.plasmid == gene)]['size'].dropna())
        if t.pvalue < 0.01:
            plt.text(i, barplot.get_ylim()[1]-ph*0.05, '%.1E' % t.pvalue, ha='center')
            h1 = r[(r.strain == strain) &
                   (r.plasmid == 'empty')]['size'].dropna().mean()
            h2 = r[(r.strain == strain) &
                   (r.plasmid == gene)]['size'].dropna().mean()
            
            plt.plot([i-0.25, i-0.25, i+0.25, i+0.25],
                     [min([h1+ph*0.2, barplot.get_ylim()[1]-ph*0.15]),
                      barplot.get_ylim()[1]-ph*0.1,
                      barplot.get_ylim()[1]-ph*0.1,
                      min([h2+ph*0.2, barplot.get_ylim()[1]-ph*0.15]),],
                     '-',
                     color='grey')
    
    plt.legend('')
    plt.ylabel('Colony area (pixels)')
    plt.xlabel('')
    plt.title(title)
    sns.despine()
    
    return r


if __name__ == "__main__":
    import os
    import random
    import numpy as np
    import pandas as pd
    from Bio import SeqIO
    from scipy import stats

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    conversion = {x.split('\t')[0]:x.rstrip().split()[1]
                  for x in open(options.eckconversion)}
                  
    ep = {}
    en = {}
    for s in SeqIO.parse(options.genbank, 'genbank'):
        for f in s.features:
            if 'gene_synonym' not in f.qualifiers or f.type != 'CDS':
                continue
            loc = list(filter(lambda x: x.strip().startswith('ECK'),
                              f.qualifiers['gene_synonym'][0].split(';')))[0].strip()
            loc = conversion.get(loc, loc)
            en[loc] = f.qualifiers.get('gene', [''])[0]
            ep[loc] = f.qualifiers.get('product', [''])[0]

    strains = pd.read_table(options.strains).set_index('mutant')['strain'].to_dict()
    rstrains = pd.read_table(options.strains).set_index('strain')['mutant']

    sname = pd.read_table(options.strainsnames, index_col=0)['Strain name'].to_dict()

    exp = pd.read_table(options.experiment)
    
    dexp = {}
    for g, targets, targetsp in exp[['gene', 'targets', 'tagetsp']].values:
        for d in targets.split(','):
            dexp[d] = g
        for d in targetsp.split(','):
            dexp[d] = g

    df = pd.read_table(options.data,
                       index_col=0,
                       header=[0, 1])

    all_strains = {x for y in exp.targets
     for x in y.split(',')}

    all_targets = {x for y in exp.tagetsp
     for x in y.split(',')}
     
    dgene = {}
    for gene, targets in exp[['gene', 'targets']].values:
        for t in targets.split(','):
            dgene[t] = gene
    for gene, targets in exp[['gene', 'tagetsp']].values:
        for t in targets.split(','):
            dgene[t] = gene

    out = []
    for cond in set(exp.condition):
        try:
            df.loc[:, (cond, '1')]
        except KeyError:
            continue
        #if cond in ['MECILLINAM', 'CHIR090.MECILLINAM', 'OXACILLIN.5UM']:
        #    continue
        for num in range(exp[exp.condition == cond].shape[0]):
            if cond == 'MECILLINAM':
                cond1 = 'MECILLINAM.CEPHALEXIN'
            else:
                cond1 = cond
            sim = pd.read_table(os.path.join(options.simulate, cond1),
                      header=None,
                      names=['condition',
                             'gene',
                             'strain',
                             'dscore',
                             'pscore',
                             'ascore',
                             'drank',
                             'prank'])

            cond, gene, prots, ref, refp, dels, delsp, targets, targetsp = exp[exp.condition == cond].values[num]

            #if gene == 'glnD':
            #    continue
            
            res = []
            ranks = []
            for v in df.loc[ref, (cond, '1')]:
                res.append((cond, 'reference', 'empty', v))
            for v in df.loc[refp, (cond, '1')]:
                res.append((cond, 'reference', 'gene', v))
            for d, i in zip(dels.split(','), range(1, len(dels.split(','))+1)):
                if len(dels.split(',')) > 1:
                    tag = 'deletion_%d' % i
                else:
                    tag = 'deletion'
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, tag, 'empty', v))
            for d, i in zip(delsp.split(','), range(1, len(delsp.split(','))+1)):
                if len(dels.split(',')) > 1:
                    tag = 'deletion_%d' % i
                else:
                    tag = 'deletion'
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, tag, 'gene', v))
            for d in all_strains:
                if gene == 'acrAB' and dgene[d] in {'acrA', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrA' and dgene[d] in {'acrAB', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrB' and dgene[d] in {'acrA', 'acrAB', 'soxSR'}:
                    continue
                elif gene == 'soxSR' and dgene[d] in {'acrA', 'acrAB', 'acrB'}:
                    continue
                elif gene == 'proAB' and dgene[d] in {'glnD'}:
                    continue
                elif gene == 'glnD' and dgene[d] in {'proAB'}:
                    continue
                rank = []
                for p in prots.split(','):
                    try:
                        rank.append(sim[(sim.gene == p) &
                                        (sim.strain == strains[d])].ascore.values[0])
                    except:
                        if p != 'P0AE06' and cond != 'BERBERINE.50':
                            print(p, strains[d], cond)
                rank = np.array(rank).mean()
                ranks.append((strains[d], rank))
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, strains[d], 'empty', v))
            for d in all_targets:
                if gene == 'acrAB' and dgene[d] in {'acrA', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrA' and dgene[d] in {'acrAB', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrB' and dgene[d] in {'acrA', 'acrAB', 'soxSR'}:
                    continue
                elif gene == 'soxSR' and dgene[d] in {'acrA', 'acrAB', 'acrB'}:
                    continue
                elif gene == 'proAB' and dgene[d] in {'glnD'}:
                    continue
                elif gene == 'glnD' and dgene[d] in {'proAB'}:
                    continue
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, strains[d], 'gene', v))
            
            r = pd.DataFrame(res)
            r.columns = ['condition', 'strain', 'plasmid', 'size']
            
            rank = pd.DataFrame(ranks)
            rank.columns = ['strain', 'rank']
            
            for strain in set(r.strain):
                if not strain.startswith('NT12'):
                    continue
                try:
                    erank = (1 - r[(r.strain == strain) &
                                    (r.plasmid == 'empty')]['size'].mean() / r[(r.strain == strain) &
                                                                               (r.plasmid == 'gene')]['size'].mean())
                except ZeroDivisionError:
                    print(strain, cond)
                    continue
                srank = rank[rank.strain == strain]['rank'].values[0]
                out.append((cond, gene, strain, erank, srank))
    o = pd.DataFrame(out)
    o.columns = ['condition', 'gene', 'strain', 'erank', 'srank']

    cname = options.cname.replace('uM', '$\mu$M').replace('ug', '$\mu$g')

    r = plot_condition_sim(options.condition,
                           options.gene,
                           title='Condition: %s (%s)' % (cname, options.gene))
    
    plt.savefig(options.outfile,
                dpi=options.dpi);
