#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_overall_roc')

    parser.add_argument('overall1')
    parser.add_argument('overall2')
    parser.add_argument('bootstrap1')
    parser.add_argument('bootstrap2')
    parser.add_argument('bootstrap3')
    parser.add_argument('outfile')

    parser.add_argument('--size', action='store',
                        type=float,
                        default=1,
                        help='Figure size [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


if __name__ == "__main__":
    import pandas as pd
    from sklearn.metrics import auc as fauc

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.size, options.size))

    auc1 = pd.read_table(options.overall1,
                         header=None)
    auc1.columns = ['auc', 'tpr', 'fpr']
    auc2 = pd.read_table(options.overall2,
                         header=None)
    auc2.columns = ['auc', 'tpr', 'fpr']

    b1 = pd.read_table(options.bootstrap1,
                       header=None)
    b1.columns = ['fpr', 'tpr', 'mad']
    b2 = pd.read_table(options.bootstrap2,
                       header=None)
    b2.columns = ['fpr', 'tpr', 'mad']
    b3 = pd.read_table(options.bootstrap3,
                       header=None)
    b3.columns = ['fpr', 'tpr', 'mad']

    colors = sns.color_palette('Reds_r', 3)
    plt.plot(auc1.fpr,
             auc1.tpr,
             '-',
             color=colors[1],
             linewidth=2.5,
             label='Simple (%.2f)' % auc1.auc.values[0],
             zorder=10)
    plt.plot(auc2.fpr,
             auc2.tpr,
             '-',
             color=colors[0],
             linewidth=2.5,
             label='Weighted (%.2f)' % auc2.auc.values[0],
             zorder=9)
    for color, marker, df, name in zip(sns.color_palette('Greys_r', 3),
                                       ('o', '^', 'D'),
                                       (b1, b2, b3),
                                       ('Strains shuffling',
                                        'Gene sets shuffling',
                                        'Random gene sets')):
        #plt.errorbar(df['fpr'],
        #             df['tpr'],
        #             yerr=df['mad'],
        #             fmt='%s-' % marker,
        #             color=color,
        #             label='%s (%.2f)' % (name, fauc(df['fpr'],
        #                                             df['tpr'])),
        #             markersize=9)
        plt.plot(df['fpr'],
                 df['tpr'],
                 '%s-' % marker,
                 color=color,
                 label='%s (%.2f)' % (name, fauc(df['fpr'],
                                                 df['tpr'])),
                 markersize=7)

    plt.legend(loc='lower right')
    plt.plot([0, 1],
             [0, 1],
             '--',
             color=sns.xkcd_rgb['grey'])
    plt.xlabel('False positive rate')
    plt.ylabel('True positive rate');

    plt.savefig(options.outfile,
                dpi=options.dpi)
