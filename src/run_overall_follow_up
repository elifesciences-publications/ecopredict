#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run follow-up overall plot"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_overall_follow_up')

    parser.add_argument('strains')
    parser.add_argument('experiment')
    parser.add_argument('data')
    parser.add_argument('simulate')
    parser.add_argument('outfile')

    parser.add_argument('--width', action='store',
                        type=float,
                        default=1,
                        help='Figure width [Default: 1 inches]')
    parser.add_argument('--height', action='store',
                        type=float,
                        default=1,
                        help='Figure height [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()


if __name__ == "__main__":
    import os
    import random
    import numpy as np
    import pandas as pd
    from scipy import stats

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    plt.rc('font', size=8)
    plt.rc('xtick', labelsize=8)
    plt.rc('ytick', labelsize=8)
    plt.rc('axes', labelsize=10, titlesize=10)
    plt.rc('legend', fontsize=8)

    plt.figure(figsize=(options.width, options.height))

    strains = pd.read_table(options.strains).set_index('mutant')['strain'].to_dict()

    exp = pd.read_table(options.experiment)

    df = pd.read_table(options.data,
                       index_col=0,
                       header=[0, 1])

    all_strains = {x for y in exp.targets
     for x in y.split(',')}

    all_targets = {x for y in exp.tagetsp
     for x in y.split(',')}
     
    dgene = {}
    for gene, targets in exp[['gene', 'targets']].values:
        for t in targets.split(','):
            dgene[t] = gene
    for gene, targets in exp[['gene', 'tagetsp']].values:
        for t in targets.split(','):
            dgene[t] = gene

    out = []
    for cond in set(exp.condition):
        try:
            df.loc[:, (cond, '1')]
        except KeyError:
            continue
        if cond in ['MECILLINAM', 'CHIR090.MECILLINAM', 'OXACILLIN.5UM']:
            continue
        for num in range(exp[exp.condition == cond].shape[0]):
            if cond == 'MECILLINAM':
                cond1 = 'MECILLINAM.CEPHALEXIN'
            else:
                cond1 = cond
            sim = pd.read_table(os.path.join(options.simulate, cond1),
                      header=None,
                      names=['condition',
                             'gene',
                             'strain',
                             'dscore',
                             'pscore',
                             'ascore',
                             'drank',
                             'prank'])

            cond, gene, prots, ref, refp, dels, delsp, targets, targetsp = exp[exp.condition == cond].values[num]

            if gene == 'glnD':
                continue
            
            res = []
            ranks = []
            for v in df.loc[ref, (cond, '1')]:
                res.append((cond, 'reference', 'empty', v))
            for v in df.loc[refp, (cond, '1')]:
                res.append((cond, 'reference', 'gene', v))
            for d, i in zip(dels.split(','), range(1, len(dels.split(','))+1)):
                if len(dels.split(',')) > 1:
                    tag = 'deletion_%d' % i
                else:
                    tag = 'deletion'
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, tag, 'empty', v))
            for d, i in zip(delsp.split(','), range(1, len(delsp.split(','))+1)):
                if len(dels.split(',')) > 1:
                    tag = 'deletion_%d' % i
                else:
                    tag = 'deletion'
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, tag, 'gene', v))
            for d in all_strains:
                if gene == 'acrAB' and dgene[d] in {'acrA', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrA' and dgene[d] in {'acrAB', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrB' and dgene[d] in {'acrA', 'acrAB', 'soxSR'}:
                    continue
                elif gene == 'soxSR' and dgene[d] in {'acrA', 'acrAB', 'acrB'}:
                    continue
                elif gene == 'proAB' and dgene[d] in {'glnD'}:
                    continue
                elif gene == 'glnD' and dgene[d] in {'proAB'}:
                    continue
                rank = []
                for p in prots.split(','):
                    try:
                        rank.append(sim[(sim.gene == p) &
                                        (sim.strain == strains[d])].ascore.values[0])
                    except:
                        if p != 'P0AE06' and cond != 'BERBERINE.50':
                            print(p, strains[d], cond)
                rank = np.array(rank).mean()
                ranks.append((strains[d], rank))
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, strains[d], 'empty', v))
            for d in all_targets:
                if gene == 'acrAB' and dgene[d] in {'acrA', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrA' and dgene[d] in {'acrAB', 'acrB', 'soxSR'}:
                    continue
                elif gene == 'acrB' and dgene[d] in {'acrA', 'acrAB', 'soxSR'}:
                    continue
                elif gene == 'soxSR' and dgene[d] in {'acrA', 'acrAB', 'acrB'}:
                    continue
                elif gene == 'proAB' and dgene[d] in {'glnD'}:
                    continue
                elif gene == 'glnD' and dgene[d] in {'proAB'}:
                    continue
                for v in df.loc[d, (cond, '1')]:
                    res.append((cond, strains[d], 'gene', v))
            
            r = pd.DataFrame(res)
            r.columns = ['condition', 'strain', 'plasmid', 'size']
            
            rank = pd.DataFrame(ranks)
            rank.columns = ['strain', 'rank']
            
            for strain in set(r.strain):
                if not strain.startswith('NT12'):
                    continue
                try:
                    erank = (1 - r[(r.strain == strain) &
                                    (r.plasmid == 'empty')]['size'].mean() / r[(r.strain == strain) &
                                                                               (r.plasmid == 'gene')]['size'].mean())
                except ZeroDivisionError:
                    print(strain, cond)
                    continue
                srank = rank[rank.strain == strain]['rank'].values[0]
                out.append((cond, gene, strain, erank, srank))
    o = pd.DataFrame(out)
    o.columns = ['condition', 'gene', 'strain', 'erank', 'srank']

    ttest = stats.ttest_ind(o[(o.srank < -0.01)]['erank'],
                            o[(o.srank >= -0.01)]['erank'])

    print(ttest)
    
    res = []
    for v in o[(o.srank <= -0.01)]['erank'].values:
        res.append(('', 'Predicted', v))
    for v in o[(o.srank > -0.01)]['erank'].values:
        res.append(('', 'Not predicted', v))
    r1 = pd.DataFrame(res)
    r1.columns = ['x', 'set', 'value']

    bp = sns.boxplot(data=r1,
                x='value',
                y='x',
                hue='set',
                palette=[sns.xkcd_rgb['pale red'],
                       sns.xkcd_rgb['pale grey']],
                notch=True)

    plt.yticks([])

    plt.legend(bbox_to_anchor=(0.5, 1.15),
               loc='center',
               frameon='True',
               ncol=2,
               title='Phenotype restoration')

    plt.axvline(0,
                color='grey',
                linestyle='dashed')

    plt.ylabel('')

    plt.xlabel('Colony area change')
    sns.despine(left=True)
    
    plt.savefig(options.outfile,
                dpi=options.dpi);
